package Hexa

import (
	"fmt"
	"mind/core/framework/drivers/hexabody"
	"strings"
	"time"
)

var motions = map[string]string{
	"Tita":   "V0A90V1A81V2A45V3A90V4A81V5A133V6A90V7A81V8A133V9A90V10A81V11A133V12A90V13A81V14A133V15A90V16A81V17A133V18A0T250|V0A90V1A81V2A133V3A90V4A81V5A45V6A90V7A81V8A133V9A90V10A81V11A133V12A90V13A81V14A133V15A90V16A81V17A133V18A0T250|V0A90V1A81V2A133V3A90V4A81V5A133V6A90V7A81V8A45V9A90V10A81V11A133V12A90V13A81V14A133V15A90V16A81V17A133V18A0T250|V0A90V1A81V2A133V3A90V4A81V5A133V6A90V7A81V8A133V9A90V10A81V11A45V12A90V13A81V14A133V15A90V16A81V17A133V18A0T250|V0A90V1A81V2A133V3A90V4A81V5A133V6A90V7A81V8A133V9A90V10A81V11A133V12A90V13A81V14A45V15A90V16A81V17A133V18A0T250|V0A90V1A81V2A133V3A90V4A81V5A133V6A90V7A81V8A133V9A90V10A81V11A133V12A90V13A81V14A133V15A90V16A81V17A45V18A0T250",
	"Cheers": "V0A90V1A90V2A45V3A90V4A90V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A70V2A45V3A60V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A120V1A70V2A45V3A120V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A70V2A45V3A60V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A120V1A70V2A45V3A120V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A70V2A45V3A60V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A120V1A70V2A45V3A120V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A70V2A45V3A120V4A70V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A110V2A45V3A120V4A40V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A40V2A45V3A120V4A110V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A110V2A45V3A120V4A40V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A40V2A45V3A120V4A110V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A110V2A45V3A120V4A40V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300|V0A60V1A40V2A45V3A120V4A110V5A45V6A120V7A110V8A135V9A90V10A70V11A135V12A90V13A70V14A135V15A60V16A110V17A135V18A0T300",
}

func runCmd(cmd string) {
	var no, degree, duration int
	acts := map[int]int{}
	for {
		no, degree := -1, -1
		fmt.Sscanf(cmd, "V%dA%d", &no, &degree)
		if no == -1 {
			break
		}
		acts[no] = degree
		cmd = cmd[strings.IndexAny(cmd[1:], "VT")+1:]
	}
	fmt.Sscanf(cmd, "T%d", &duration)
	for no, degree = range acts {
		if no == 18 {
			go hexabody.MoveHead(float64(degree), duration)
		} else {
			go hexabody.MoveJoint(no/3, no%3, float64(degree), duration)
		}
	}
	time.Sleep(time.Millisecond * time.Duration(duration))
}

func (d *Hexa) RunCmd(data string, times int) {
	log.Debug.Println(data)
	cmds := strings.Split(data, "|")
	for i := 0; i < times; i = i + 1 {
		for _, cmd := range cmds {
			runCmd(cmd)
		}
	}
}

// func readFile(name string) string {
// 	if contents, err := ioutil.ReadFile(name); err == nil {
// 		//因为contents是[]byte类型，直接转换成string类型后会多一行空格,需要使用strings.Replace替换换行符
// 		result := strings.Replace(string(contents), "\n", "", 1)
// 		return result
// 	} else {
// 		log.Debug.Println(err)
// 		return ""
// 	}
// }
